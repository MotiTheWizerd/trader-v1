"""Initial migration

Revision ID: 77e5b9c74f3f
Revises: 
Create Date: 2025-07-10 12:50:20.836618

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '77e5b9c74f3f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_tickers_signals_id'), table_name='tickers_signals')
    op.drop_index(op.f('ix_tickers_signals_ticker'), table_name='tickers_signals')
    op.drop_index(op.f('ix_tickers_signals_timestamp'), table_name='tickers_signals')
    op.drop_table('tickers_signals')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_name'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_tickers_data_id'), table_name='tickers_data')
    op.drop_index(op.f('ix_tickers_data_ticker'), table_name='tickers_data')
    op.drop_index(op.f('ix_tickers_data_timestamp'), table_name='tickers_data')
    op.drop_table('tickers_data')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tickers_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ticker', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('open', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('high', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('low', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('close', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('volume', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('dividends', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('stock_splits', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('tickers_data_pkey'))
    )
    op.create_index(op.f('ix_tickers_data_timestamp'), 'tickers_data', ['timestamp'], unique=False)
    op.create_index(op.f('ix_tickers_data_ticker'), 'tickers_data', ['ticker'], unique=False)
    op.create_index(op.f('ix_tickers_data_id'), 'tickers_data', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey'))
    )
    op.create_index(op.f('ix_users_name'), 'users', ['name'], unique=False)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('tickers_signals',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ticker', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('signal', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('reasoning', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('tickers_signals_pkey'))
    )
    op.create_index(op.f('ix_tickers_signals_timestamp'), 'tickers_signals', ['timestamp'], unique=False)
    op.create_index(op.f('ix_tickers_signals_ticker'), 'tickers_signals', ['ticker'], unique=False)
    op.create_index(op.f('ix_tickers_signals_id'), 'tickers_signals', ['id'], unique=False)
    # ### end Alembic commands ###
